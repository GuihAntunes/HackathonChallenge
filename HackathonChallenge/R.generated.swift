//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 5 colors.
  struct color {
    /// Color `Healthy Blue`.
    static let healthyBlue = Rswift.ColorResource(bundle: R.hostingBundle, name: "Healthy Blue")
    /// Color `Healthy Brown`.
    static let healthyBrown = Rswift.ColorResource(bundle: R.hostingBundle, name: "Healthy Brown")
    /// Color `Healthy Darker Yellow`.
    static let healthyDarkerYellow = Rswift.ColorResource(bundle: R.hostingBundle, name: "Healthy Darker Yellow")
    /// Color `Healthy Green`.
    static let healthyGreen = Rswift.ColorResource(bundle: R.hostingBundle, name: "Healthy Green")
    /// Color `Healthy Yellow`.
    static let healthyYellow = Rswift.ColorResource(bundle: R.hostingBundle, name: "Healthy Yellow")
    
    /// `UIColor(named: "Healthy Blue", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func healthyBlue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.healthyBlue, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "Healthy Brown", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func healthyBrown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.healthyBrown, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "Healthy Darker Yellow", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func healthyDarkerYellow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.healthyDarkerYellow, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "Healthy Green", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func healthyGreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.healthyGreen, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "Healthy Yellow", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func healthyYellow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.healthyYellow, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 2 files.
  struct file {
    /// Resource file `MockedAPI.json`.
    static let mockedAPIJson = Rswift.FileResource(bundle: R.hostingBundle, name: "MockedAPI", pathExtension: "json")
    /// Resource file `noodles.json`.
    static let noodlesJson = Rswift.FileResource(bundle: R.hostingBundle, name: "noodles", pathExtension: "json")
    
    /// `bundle.url(forResource: "MockedAPI", withExtension: "json")`
    static func mockedAPIJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mockedAPIJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "noodles", withExtension: "json")`
    static func noodlesJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.noodlesJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 0 images.
  struct image {
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 0 nibs.
  struct nib {
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `ItemCollectionViewCell`.
    static let itemCollectionViewCell: Rswift.ReuseIdentifier<ItemCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "ItemCollectionViewCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 1 view controllers.
  struct segue {
    /// This struct is generated for `SplashViewController`, and contains static references to 1 segues.
    struct splashViewController {
      /// Segue identifier `AddressSelection`.
      static let addressSelection: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SplashViewController, UIKit.UINavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "AddressSelection")
      
      /// Optionally returns a typed version of segue `AddressSelection`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func addressSelection(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SplashViewController, UIKit.UINavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.splashViewController.addressSelection, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.titles` struct is generated, and contains static references to 1 localization keys.
    struct titles {
      /// Value: Choose your food
      static let itemsSelectionTitle = Rswift.StringResource(key: "itemsSelectionTitle", tableName: "Titles", bundle: R.hostingBundle, locales: [], comment: nil)
      
      /// Value: Choose your food
      static func itemsSelectionTitle(_: Void = ()) -> String {
        return NSLocalizedString("itemsSelectionTitle", tableName: "Titles", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      // There are no resources to validate
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R {
  struct nib {
    fileprivate init() {}
  }
  
  struct storyboard {
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = SplashViewController
      
      let bundle = R.hostingBundle
      let name = "Main"
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
